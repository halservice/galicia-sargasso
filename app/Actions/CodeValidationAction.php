<?php

namespace App\Actions;

use App\AI\ChatGPT;
use App\AI\LLama;
use App\Enums\LLM;
use App\Models\GeneratedCode;
use App\Models\GeneratedFormalModel;
use App\Models\GeneratedValidatedCode;
use App\Models\UserSetting;
use App\Traits\checkFailedTest;
use App\Traits\ExtractCodeTrait;
use App\Traits\ExtractTestResultsTrait;
use Illuminate\Http\Client\ConnectionException;

class CodeValidationAction
{
    use ExtractCodeTrait;
    use checkFailedTest;
    use ExtractTestResultsTrait;

    public function __construct(
//        private readonly CodeGeneratorSettings $settings,
        private readonly ?UserSetting $settings,

//        private readonly ResetGeneratorsAction $resetGeneratorsAction,
    )
    {
        //
    }

    /**
     * @throws ConnectionException
     */
    public function __invoke(GeneratedCode $code, GeneratedFormalModel $formalModel): GeneratedValidatedCode
    {
        $settings = UserSetting::where('user_id', auth()->id())->first();
        $iterations = $settings->iteration;
        $model = \Auth::user()->settings->llm_validation;
        $coder = match ($settings->llm_code) {
            LLM::Llama->value => new LLama(),
            default => new ChatGPT()
        };

        $testCaseSystem = "Given a user request, a formal model and a code, generate a set of test cases that the code should execute if written correctly.
        Ensure coverage of edge cases, threshold values and security issues.
            Format the output ensuring:
                1. No introductory phrases (e.g., 'Certainly,' 'Sure,' etc.). The response must not indicate that it is generated by an AI chatbot.
                2. Each test case is clearly separated by an empty line.
                3. Write in markdown format.";
        $testCaseMessage = "Given the following request $formalModel->requirement and the formal model {$formalModel->generated_formal_model} and the code {$code->generated_code}, could you generate a few test cases that the code should execute if written correctly?";
        $message = [
            [
                'role' => 'system',
                'content' => $testCaseSystem,
            ], [
                'role' => 'user',
                'content' => $testCaseMessage
            ]
        ];
        $testCases = $coder->send($message, $model);
//        ($this->resetGeneratorsAction)();

        $systemMessage = "Your job is to verify if the given source code complies with the given test cases.
        You must refine the code following the examples in the test cases, making sure the code pass them all, unless they are not applicable.
         **Rules:**
        - If the code passes all test cases but can be improved, apply minimal, non-intrusive refinements to make the code more efficient or readable.
        - Do not add initialization instructions in the source code that modify the value of input parameters, even if these instructions are part of the formal model.
        - Only fix mistakes in the requested function(s)â€”DO NOT add a `main`, additional functions, or any execution logic.
        - The function(s) must remain standalone. Assume they will be tested in an external environment.
        - If a test case is not applicable to the given code, discard it and specify why- DO NOT modify the code if the test case is not applicable.
        **Output format:**
        1. '### Validated code:' followed by the refined function (if improved) or the original if unchanged.
        2. '### Changes Made:' listing any fixes or improvements (or stating 'No changes needed.').
        3. '### Test cases:' summarizing test results and specifying which pass/fail. If a test case is discarded, explain why. Leave an empty lines after every test.
        4. '### Number of test failed:' an integer (0 if all applicable tests pass).";

        $userMessage = "Validate this code:\n {$code->generated_code}.\nFollowing the test cases:\n {$testCases}";

        $currentCode = $code->generated_code;
        $message = $coder->systemMessage($systemMessage, $userMessage);
        $messages = $message;
        $flag = false;
        for ($i = 1; $i <= $iterations && $flag === false; $i++) {
//            $this->req = "Validating the code... Iteration: $i/$iterations";
//            $this->stream(to: 'req', content: $this->req);

            $response = $coder->send($message, $model);
            $messages[] = [
                'role' => 'assistant',
                'content' => $response,
            ];

            $flag = $this->checkFailed($response);
            $currentCode = $this->extractCodeFromResponse($response);
            if (!$flag && $i + 1 <= $iterations) {
                $messages[] = [
                    'role' => 'user',
                    'content' => "Here is the updated code after iteration $i: $currentCode. Please, validate the code again following the test cases $test_cases."
                ];
                $message = [
                    [
                        'role' => 'system',
                        'content' => $systemMessage,
                    ], [
                        'role' => 'user',
                        'content' => end($messages)['content'],
                    ]
                ];
            }

        }
        $testResults = $this->extractTestResult(end($messages)['content']);
        return GeneratedValidatedCode::log(
            $settings->startFromGeneratedCode() ? $formalModel : $code,
            $testCases,
            $testResults,
            $messages,
            $systemMessage,
            $currentCode,
        );
    }

    protected function checkFailed(string $response): bool
    {
//        if (preg_match('/Number of changes made:\s*(\d+)/i', $response, $matches)) {
//            $number = (int)trim($matches[1]);
//            if ($number === 0) {
//                return true;
//            }
//        }
//
//        return false;

        $number = $this->checkFailedTest($response);
        if($number === 0){
            return true;
        }

        return  false;
    }


}
